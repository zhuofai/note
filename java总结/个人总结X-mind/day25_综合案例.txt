用户模块
	使用html作为视图层
		优点：
			把某一部分业务逻辑在客户端执行。降低服务器压力。加快页面的访问速度。
		缺点：
			加大代码的复杂度，是开发更加麻烦。
			前端代码debug及其困难。
	注册
		前台表单校验
			1.正则表达式的使用
			2.前台的校验不能保证数据的有效性，必须在后台继续校验才可以。
		表单提交
			1.禁用掉前台的浏览器默认的提交行为。
				把表单的submit()事件的返回值固定为false
			2.发送异步请求，提交表单信息。
				使用表单的jq对象，可以调用serialize()方法，快速完成表单参数的封装。
		激活
			如果账号只经过注册，没有激活的话，是没有权限登录的。
				1.防止恶意注册。
				2.获取用户的真实联系方式。（邮箱、手机号……）
			为了保证激活链接的唯一性，使用随机生成激活码的方式发送激活邮件。
			UUID
				时空唯一的一个字符串，一般用于字符串类型的主键的生成。
			激活的操作本质上就是一个数据库数据的修改，把激活状态修改为已激活即可。
			流程：
				当用户点击激活邮件中的url时，实际上时访问了服务器的一个Servlet，并且
				把唯一激活码传递到服务器，我们通过激活码查询用户，最多能查询到一个用户
				与之对应。如果查询到一个用户，我们只需要把这个用户的状态修改为已激活即可。
	登录
		如何保持登录状态（判断用户已经登录的依据是什么）？
			登录之后会把用户信息存入session中，如果session中有用户信息，就是已经登录了。
		判断用户是否激活的操作不要在sql中体现，而是查出user对象后再判断。
		回显用户信息
			在html页面中不能直接使用session获取数据的。只能通过异步请求获取数据。
			缺点：
				网络环境差的时候，用户名回显会不及时。
	退出
		1.把session销毁掉
			优点：简单
			缺点：session销毁，会把其他信息也一并清除
		2.把session中的user通过removeAttribute移除掉
			优点：可以精准清除，只把user对象删除掉，不影响其他数据。
			缺点：如果session中存储了其他和用户相关的数据，这些数据也要一并清除掉，比较麻烦。
重构
	高内聚，低耦合
		解耦：不同模块之间要降低耦合度。
		内聚：同一模块内部要尽可能的聚合到一起。
	解决方案
		把同一模块的Servlet的逻辑集中到一起，在一个Servlet中编写。不同逻辑使用不同的方法进行封装
		-->问题转化为：不同的方法如何被不同的请求调用
			使用不同的url访问同一个Servlet，把Servlet的url-pattern配置为/模块名/*的格式，*可以指定为方法名
		-->问题转化为：
			知道了将要调用的方法名，如何调用方法
				使用反射获取Method对象进行调用
			注意：
				1.在BaseServlet中使用this时，由于BaseServlet仅供子类继承使用，
				所以代码实际上在子类执行，this代表的是子类对象。this.getClass()获
				取到的也是子类的字节码对象。
				2.子类声明方法时，主要修饰符要指定为public的。
					如果使用暴力反射，会带来一些稳定性问题，容易被调用到本来不应该被用户调用的逻辑，导致系统崩溃。
	重构代码结构的优缺点
		优点：
			会使代码的架构优化，便于维护
		缺点：
			使用了和官方标准不一致的api调用方式，会导致代码不兼容，会使代码的学习成本增加
分类信息展示
	使用异步请求加载分类信息，缺点是异步加载有体验中断（延迟）。
		原因：数据库查询的耗时比较长。
	缓存的使用
		redis
			二级缓存
				首先，数据优先从内存缓存中获取，如果有，直接返回。
								如果没有，去数据库查询，同时把数据存储到内存缓存中。返回数据。
		使用缓存的数据的特点：
			数据应该不经常发生变化
			使用缓存之后，要考虑数据同步问题。如果数据发生了增删改，缓存要清空，重新获取。


-DarchetypeCatalog=internal -Dfile.encoding=GBK
		
			