maven
	依赖管理
		依赖
			项目运行时要依托另外的一个项目或者jar包，此时成这个jar包为当前项目的依赖。
		依赖管理：
			maven可以统一管理jar包。
			传统项目的jar包都是复制拷贝的，每创建一个项目，依赖就会重复拷贝一份，大大的占用磁盘空间。同时，如果某个jar包要进行版本升级，每个项目都要重新拷贝一份。
			而maven项目统一有一份jar包存放在仓库中，每个项目通过坐标引入仓库中的jar包。
	一键构建
		帮助我们快速编译和打包工程
		项目从编译、测试、运行、打包、安装 ，部署整个过程都交给 maven 进行管理，这个过程称为构建。
		可以使用一个maven命令快速完成这一系列的工作，所以称为一键构建。
		注意：
			打包的时候，一个web项目最终打成的war包中有没有依赖的jar包？
				有jar包。因为最终war包是可以独立发布到服务器运行的。
			maven运行web项目时，是否需要依赖本地的tomcat环境
				自带tomcat插件，不需要本地tomcat。
	仓库
		分类：
			本地仓库、远程仓库（私服）、中央仓库（国外的服务器）
			优先从本地仓库获取，初始的时候本地仓库中没有jar包，获取jar包时，如果本地没有，去远程仓库中获取。
			一般远程仓库是局域网内的。如果远程仓库中没有，去中央仓库获取。
			中央仓库中集合了几乎所有市面上开源的jar包。但是中央仓库的访问速度比较慢。

			如果从远程仓库或中央仓库获取jar包，获取成功的同时，会自动在本地仓库保存一份。
			如果从中央仓库获取，远程仓库也会保存一份。
		补充：
			为了解决国外的中央仓库服务器不能访问的问题，国内很多组织开放了自己的私服，可以供国内开发者使用。
			可以通过配置国内镜像的方式快速获取依赖。
			配置方式：
				在maven/conf/settings.xml中，配置<mirrors></mirrors>标签的内容为国内镜像即可。
	项目目录结构：
		项目名
			src
				main  --- 主目录，用于放置核心代码和配置文件
					java --- 核心代码的目录
					resources --- 配置文件的目录
					webapp --- web资源目录
						WEB-INF
				test  --- 测试目录，用于放置测试代码和配置文件。打包时此目录会被忽略
					java --- 测试代码的目录
					resources --- 测试配置文件的目录
			pom.xml
				maven项目的配置文件，一般用于配置项目的参数（版本号，项目包名，项目类型...）
					还可以配置依赖信息
					还可以配置项目中使用的插件信息。（JDK编译插件、tomcat插件...）
	命令
		clean
		compile
		test命令
			编译核心逻辑的代码，也会编译test的代码逻辑。同时会自动执行test中的所有测试用例。
		package
	maven在idea中的集成
		设置maven的目录和配置文件及仓库的位置
		在Runner中VM Options
			添加      -DarchetypeCatalog=internal -Dfile.encoding=GBK    参数的设置
	创建项目
		1.推荐大家在idea中创建项目时，首先创建一个Empty Project，相当于是指定了一个工作空间。
		然后在空项目中，创建想要创建的模块，当作项目使用。
		打开自动导入。
		2.maven项目创建和使用的时候最好处于联网状态。
	骨架：
		已经创建好的一个模板项目，例如一个web项目的模板。
	使用骨架创建web项目之后，注意在webapp目录下，WEB-INF下有三个配置文件，需要删除除了web.xml之外的两个。然后把web.xml的内容注释掉。

要求：
	1.使用骨架创建一个web项目
	2.把jdk版本和tomcat版本修改为合适的版本
	3.创建一个Servlet，重定向到jsp页面展示信息。

		
	
	



